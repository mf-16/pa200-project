// <auto-generated />
using System;
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.PostgreSQL.Migrations.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    partial class BookHubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Sunt nulla dignissimos optio expedita necessitatibus explicabo nesciunt. Quod enim sit est vel et est recusandae dolorum consequatur. Accusamus illo accusantium omnis est. Itaque in et expedita dolor.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 807, DateTimeKind.Utc).AddTicks(7021),
                            IsDeleted = false,
                            Name = "Guiseppe Bernhard"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Quo vel et eum. Dolore ea explicabo totam quos omnis non autem possimus. Est sunt eligendi porro molestiae inventore earum. In qui aspernatur maiores labore tempora ex hic. Quisquam aut quam sed ut libero qui.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 807, DateTimeKind.Utc).AddTicks(7908),
                            IsDeleted = false,
                            Name = "Justen Kunde"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Nulla excepturi cupiditate ratione. Recusandae et necessitatibus fugiat dolores quia praesentium necessitatibus. Tempora recusandae rem nisi magnam dolor debitis placeat est. Aut autem fuga saepe quaerat aut esse.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 807, DateTimeKind.Utc).AddTicks(8199),
                            IsDeleted = false,
                            Name = "Raleigh Schulist"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Eveniet qui corporis dolorem reiciendis sit. Fugit in earum. Quibusdam vitae officiis pariatur ut quia autem repellendus eos.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 807, DateTimeKind.Utc).AddTicks(8628),
                            IsDeleted = false,
                            Name = "Forrest Walker"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Suscipit blanditiis et. Incidunt facilis qui molestiae vitae incidunt repellendus. Officia iusto ratione enim alias animi rerum.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 808, DateTimeKind.Utc).AddTicks(663),
                            IsDeleted = false,
                            Name = "Hobart Braun"
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Fuga corporis expedita odio voluptatem. Veritatis totam officia accusantium vitae mollitia dolores. Delectus et aperiam veniam adipisci deserunt laudantium.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 808, DateTimeKind.Utc).AddTicks(742),
                            IsDeleted = false,
                            Name = "Conor Runolfsson"
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Modi minus magni fuga perferendis et. Sit est quis. Qui commodi praesentium est sequi voluptatem animi. Molestias et illum qui numquam rerum. Nesciunt sed praesentium facere doloremque.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 808, DateTimeKind.Utc).AddTicks(831),
                            IsDeleted = false,
                            Name = "Zane Pollich"
                        },
                        new
                        {
                            Id = 8,
                            Bio = "Veritatis nesciunt quo incidunt eveniet perspiciatis corporis ea alias minima. Deleniti sunt iusto ducimus nulla esse qui et autem. Dicta quidem voluptatum. Et totam sed.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 808, DateTimeKind.Utc).AddTicks(981),
                            IsDeleted = false,
                            Name = "Kenyatta Morar"
                        },
                        new
                        {
                            Id = 9,
                            Bio = "Provident nisi libero provident et praesentium aut ipsam est. Voluptatum quidem facilis modi consequatur exercitationem tenetur. Et est deleniti incidunt culpa. Molestias velit et quod natus id ullam.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 808, DateTimeKind.Utc).AddTicks(1114),
                            IsDeleted = false,
                            Name = "Queenie Hilll"
                        },
                        new
                        {
                            Id = 10,
                            Bio = "Illo maiores sint et eum rem aspernatur aliquid iure. Ea eos porro id ut. In omnis sapiente non voluptatem dolore quam nulla numquam. Dicta velit amet nemo nisi iusto rerum quaerat ipsum. Atque vel recusandae ut.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 808, DateTimeKind.Utc).AddTicks(1228),
                            IsDeleted = false,
                            Name = "Layla Von"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Genre")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 5,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 812, DateTimeKind.Utc).AddTicks(7354),
                            Genre = 3,
                            ImagePath = "https://picsum.photos/640/480/?image=845",
                            IsDeleted = false,
                            Price = 33.67m,
                            PublisherId = 2,
                            Title = "Cum perspiciatis sit."
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 7,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(328),
                            Genre = 1,
                            ImagePath = "https://picsum.photos/640/480/?image=271",
                            IsDeleted = false,
                            Price = 46.57m,
                            PublisherId = 1,
                            Title = "Vero hic repudiandae."
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 4,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(529),
                            Genre = 2,
                            ImagePath = "https://picsum.photos/640/480/?image=936",
                            IsDeleted = false,
                            Price = 64.35m,
                            PublisherId = 4,
                            Title = "Et delectus similique."
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(572),
                            Genre = 4,
                            ImagePath = "https://picsum.photos/640/480/?image=528",
                            IsDeleted = false,
                            Price = 24.21m,
                            PublisherId = 3,
                            Title = "Consequuntur impedit qui."
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(608),
                            Genre = 1,
                            ImagePath = "https://picsum.photos/640/480/?image=278",
                            IsDeleted = false,
                            Price = 50.17m,
                            PublisherId = 5,
                            Title = "Quos ipsam aperiam."
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 7,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(640),
                            Genre = 0,
                            ImagePath = "https://picsum.photos/640/480/?image=835",
                            IsDeleted = false,
                            Price = 72.99m,
                            PublisherId = 2,
                            Title = "Ex qui quam."
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 4,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(731),
                            Genre = 7,
                            ImagePath = "https://picsum.photos/640/480/?image=301",
                            IsDeleted = false,
                            Price = 70.84m,
                            PublisherId = 1,
                            Title = "Iste porro eligendi."
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 8,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(759),
                            Genre = 2,
                            ImagePath = "https://picsum.photos/640/480/?image=815",
                            IsDeleted = false,
                            Price = 82.02m,
                            PublisherId = 5,
                            Title = "Quia voluptate ab."
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 7,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(791),
                            Genre = 3,
                            ImagePath = "https://picsum.photos/640/480/?image=718",
                            IsDeleted = false,
                            Price = 82.22m,
                            PublisherId = 4,
                            Title = "Id fugit sunt."
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(829),
                            Genre = 6,
                            ImagePath = "https://picsum.photos/640/480/?image=188",
                            IsDeleted = false,
                            Price = 97.99m,
                            PublisherId = 5,
                            Title = "Molestias corrupti quia."
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 8,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(863),
                            Genre = 7,
                            ImagePath = "https://picsum.photos/640/480/?image=944",
                            IsDeleted = false,
                            Price = 33.23m,
                            PublisherId = 2,
                            Title = "Nostrum est eligendi."
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 10,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(892),
                            Genre = 2,
                            ImagePath = "https://picsum.photos/640/480/?image=792",
                            IsDeleted = false,
                            Price = 73.72m,
                            PublisherId = 2,
                            Title = "Et amet dolor."
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(956),
                            Genre = 6,
                            ImagePath = "https://picsum.photos/640/480/?image=499",
                            IsDeleted = false,
                            Price = 18.23m,
                            PublisherId = 5,
                            Title = "Dolore dolor dolores."
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(984),
                            Genre = 5,
                            ImagePath = "https://picsum.photos/640/480/?image=684",
                            IsDeleted = false,
                            Price = 94.22m,
                            PublisherId = 1,
                            Title = "Consequatur repellat eos."
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 4,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1015),
                            Genre = 1,
                            ImagePath = "https://picsum.photos/640/480/?image=67",
                            IsDeleted = false,
                            Price = 15.15m,
                            PublisherId = 5,
                            Title = "Fuga nihil cumque."
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1043),
                            Genre = 7,
                            ImagePath = "https://picsum.photos/640/480/?image=151",
                            IsDeleted = false,
                            Price = 22.03m,
                            PublisherId = 4,
                            Title = "Aspernatur accusamus praesentium."
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 8,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1075),
                            Genre = 4,
                            ImagePath = "https://picsum.photos/640/480/?image=84",
                            IsDeleted = false,
                            Price = 14.84m,
                            PublisherId = 5,
                            Title = "Voluptatem est vero."
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1104),
                            Genre = 6,
                            ImagePath = "https://picsum.photos/640/480/?image=736",
                            IsDeleted = false,
                            Price = 48.63m,
                            PublisherId = 5,
                            Title = "Blanditiis qui aspernatur."
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 1,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1164),
                            Genre = 8,
                            ImagePath = "https://picsum.photos/640/480/?image=50",
                            IsDeleted = false,
                            Price = 55.68m,
                            PublisherId = 1,
                            Title = "Ut itaque expedita."
                        },
                        new
                        {
                            Id = 20,
                            AuthorId = 4,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1194),
                            Genre = 0,
                            ImagePath = "https://picsum.photos/640/480/?image=197",
                            IsDeleted = false,
                            Price = 75.08m,
                            PublisherId = 2,
                            Title = "Quidem dolorum voluptatem."
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1803),
                            IsDeleted = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1806),
                            IsDeleted = false,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingAddress = "123 Main St, City, Country",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1566),
                            CustomerEmail = "user@user.com",
                            CustomerName = "Jonh Doe",
                            IsDeleted = false,
                            ShippingAddress = "123 Main St, City, Country",
                            TotalAmount = 916m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BillingAddress = "123 Main St, City, Country",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1579),
                            CustomerEmail = "user@user.com",
                            CustomerName = "Jonh Doe",
                            IsDeleted = false,
                            ShippingAddress = "123 Main St, City, Country",
                            TotalAmount = 575m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BillingAddress = "123 Main St, City, Country",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1579),
                            CustomerEmail = "user@user.com",
                            CustomerName = "Jonh Doe",
                            IsDeleted = false,
                            ShippingAddress = "123 Main St, City, Country",
                            TotalAmount = 993m,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 14,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1707),
                            IsDeleted = false,
                            OrderId = 1,
                            Price = 83m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 2,
                            BookId = 5,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1714),
                            IsDeleted = false,
                            OrderId = 1,
                            Price = 55m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 3,
                            BookId = 20,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1715),
                            IsDeleted = false,
                            OrderId = 1,
                            Price = 93m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 4,
                            BookId = 15,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1716),
                            IsDeleted = false,
                            OrderId = 1,
                            Price = 64m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 5,
                            BookId = 15,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1717),
                            IsDeleted = false,
                            OrderId = 1,
                            Price = 81m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 6,
                            BookId = 8,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1720),
                            IsDeleted = false,
                            OrderId = 2,
                            Price = 57m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 7,
                            BookId = 13,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1721),
                            IsDeleted = false,
                            OrderId = 2,
                            Price = 56m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 8,
                            BookId = 9,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1722),
                            IsDeleted = false,
                            OrderId = 2,
                            Price = 72m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 9,
                            BookId = 12,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1723),
                            IsDeleted = false,
                            OrderId = 2,
                            Price = 89m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 10,
                            BookId = 10,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1724),
                            IsDeleted = false,
                            OrderId = 2,
                            Price = 94m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 11,
                            BookId = 3,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1725),
                            IsDeleted = false,
                            OrderId = 3,
                            Price = 77m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 12,
                            BookId = 13,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1726),
                            IsDeleted = false,
                            OrderId = 3,
                            Price = 94m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 13,
                            BookId = 11,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1727),
                            IsDeleted = false,
                            OrderId = 3,
                            Price = 83m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 14,
                            BookId = 19,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1728),
                            IsDeleted = false,
                            OrderId = 3,
                            Price = 62m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 15,
                            BookId = 5,
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 813, DateTimeKind.Utc).AddTicks(1729),
                            IsDeleted = false,
                            OrderId = 3,
                            Price = 72m,
                            Quantity = 3
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Beatae asperiores facere in alias occaecati quam. Laudantium porro cumque ipsum voluptatem autem aut. Minus omnis aliquid laborum.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 810, DateTimeKind.Utc).AddTicks(3186),
                            IsDeleted = false,
                            Name = "Walter - Schoen"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Magnam veritatis voluptatibus ut aliquid quos dolores. Aperiam neque cupiditate aut et. Magni dolor facere voluptatum explicabo enim qui dolores ipsum.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 810, DateTimeKind.Utc).AddTicks(4024),
                            IsDeleted = false,
                            Name = "Toy - Gutkowski"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Quasi facere laborum non provident sint fugiat natus. Sapiente dignissimos voluptatem quam pariatur. Est minus voluptatem debitis explicabo consequuntur.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 810, DateTimeKind.Utc).AddTicks(4267),
                            IsDeleted = false,
                            Name = "Homenick - Bradtke"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Ea incidunt asperiores vel cumque est cupiditate. Iste aut et voluptates quis eum aut reiciendis. Quam similique reiciendis. Et nobis dolor qui et magni. Voluptatem animi sunt sed.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 810, DateTimeKind.Utc).AddTicks(4497),
                            IsDeleted = false,
                            Name = "Mohr, Rowe and Schaden"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Aperiam laboriosam consectetur vitae nihil nam dolor. Quibusdam ut qui quibusdam voluptates in accusantium blanditiis eum ratione. Repudiandae quo harum esse ex voluptatem sed quasi. Sint voluptate esse dignissimos dolores non quia. Non nostrum porro in. Optio quia aut.",
                            CreatedDate = new DateTime(2024, 10, 17, 9, 4, 25, 810, DateTimeKind.Utc).AddTicks(4735),
                            IsDeleted = false,
                            Name = "Kunde LLC"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Stars")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DataAccessLayer.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "497a9e42-e9b8-4e5e-a822-e66c288d24c2",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPD3CZvtC3tU+IO+QfcZwqj37a7eDD39GMiTQDb8UFphyyTwTR1B3mHXy8ROogAQZQ==",
                            PhoneNumber = "0123456987",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "546ce559-6643-455b-90e8-c380be3dd6ef",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a536b094-3446-48b8-bc4f-c08801dbdcf3",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jonh Doe",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEK2E60c5e/+t+4ZJnojuxYY9BupfArERL4iKBLZ7LMxK/a0F2Vts3LvSsM+SQBAy7g==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "30668007-221f-46d0-8d0d-8fd93bdd5365",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Model.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Cart", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Model.CartItem", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Model.OrderItem", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Review", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Model.WishlistItem", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Model.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Model.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Model.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
