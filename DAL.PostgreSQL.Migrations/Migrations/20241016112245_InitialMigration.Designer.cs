// <auto-generated />
using System;
using DataAccessLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.PostgreSQL.Migrations.Migrations
{
    [DbContext(typeof(BookHubDbContext))]
    [Migration("20241016112245_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Model.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Aliquid eligendi deserunt quia molestiae expedita eveniet odio impedit. Inventore ipsa animi quo. Aut aut vel et autem ut iste optio. Dolores velit similique. Harum eaque aut ea eveniet. Blanditiis asperiores et aliquid in deleniti qui dolor sint.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 164, DateTimeKind.Utc).AddTicks(3846),
                            IsDeleted = false,
                            Name = "Kendall Moore"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Debitis dignissimos id similique ut totam soluta accusamus. Deserunt nihil ut placeat laudantium reiciendis quis repellendus. Eos officiis consequuntur eligendi. Cumque blanditiis voluptatem eos.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 164, DateTimeKind.Utc).AddTicks(4550),
                            IsDeleted = false,
                            Name = "Henry Adams"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Sit voluptas nesciunt id rerum. Perferendis non ipsum quibusdam ea provident ut provident temporibus nihil. At rerum vero aut vel impedit vitae magnam voluptatem expedita. Accusamus dolores nobis nemo. Sed praesentium repellendus.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 164, DateTimeKind.Utc).AddTicks(4694),
                            IsDeleted = false,
                            Name = "Leda Cruickshank"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Quod velit iusto culpa corporis ducimus et dolores. Sint et ipsum. Possimus nulla illum totam natus et cumque.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 164, DateTimeKind.Utc).AddTicks(4953),
                            IsDeleted = false,
                            Name = "Eunice Kshlerin"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Accusantium et nulla sint aspernatur reiciendis repudiandae ratione. Officiis deserunt molestiae reprehenderit autem dolore. Temporibus voluptatum sunt eveniet corporis ducimus. Possimus et saepe voluptatem eaque iure. Consectetur molestiae modi.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 164, DateTimeKind.Utc).AddTicks(5050),
                            IsDeleted = false,
                            Name = "Amara Schimmel"
                        },
                        new
                        {
                            Id = 6,
                            Bio = "Dignissimos a ratione et consectetur maxime incidunt. Dignissimos velit eos. Vero in accusamus optio debitis et inventore asperiores exercitationem et. Voluptatem est sapiente non. Distinctio consequatur asperiores laudantium. Ullam est accusamus rerum in beatae iste sunt iste nihil.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 164, DateTimeKind.Utc).AddTicks(5143),
                            IsDeleted = false,
                            Name = "Luz Goodwin"
                        },
                        new
                        {
                            Id = 7,
                            Bio = "Atque corporis impedit consequatur rem voluptatibus error. Quo eos voluptatibus fugiat. Quia voluptatem a. Est et facilis odit distinctio. Delectus soluta doloremque quo nostrum necessitatibus quisquam placeat id dolor. Consequuntur quia non.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 164, DateTimeKind.Utc).AddTicks(5284),
                            IsDeleted = false,
                            Name = "Elizabeth Schultz"
                        },
                        new
                        {
                            Id = 8,
                            Bio = "Quia dignissimos natus et velit magni non minima et. Quaerat cum nisi. Reprehenderit tenetur illum sit provident autem et aliquam.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 164, DateTimeKind.Utc).AddTicks(5414),
                            IsDeleted = false,
                            Name = "Cassie Greenholt"
                        },
                        new
                        {
                            Id = 9,
                            Bio = "Ea consequatur earum repellendus quis dignissimos voluptatum consequatur reprehenderit. Voluptatibus sed accusantium quae et. Eum dolores et at minima quos quia vero corporis. Esse dicta ratione ipsa consequatur similique. Beatae perferendis est saepe occaecati reiciendis fugit.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 164, DateTimeKind.Utc).AddTicks(5481),
                            IsDeleted = false,
                            Name = "Prudence Harris"
                        },
                        new
                        {
                            Id = 10,
                            Bio = "Odit recusandae sit ipsum ipsum est cum doloremque illo soluta. Enim aliquam et molestiae et maxime. Quia est officia quia omnis aut qui et a repellendus. Non magni placeat quos aut est.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 164, DateTimeKind.Utc).AddTicks(5646),
                            IsDeleted = false,
                            Name = "Garfield Wehner"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Genre")
                        .HasColumnType("integer");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("PublisherId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 8,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(3283),
                            Genre = 5,
                            ImagePath = "https://picsum.photos/640/480/?image=805",
                            IsDeleted = false,
                            Price = 17.01m,
                            PublisherId = 3,
                            Title = "Iusto qui distinctio."
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6127),
                            Genre = 2,
                            ImagePath = "https://picsum.photos/640/480/?image=117",
                            IsDeleted = false,
                            Price = 97.00m,
                            PublisherId = 4,
                            Title = "Est culpa porro."
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 7,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6294),
                            Genre = 6,
                            ImagePath = "https://picsum.photos/640/480/?image=547",
                            IsDeleted = false,
                            Price = 84.61m,
                            PublisherId = 2,
                            Title = "Facere aspernatur quas."
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6335),
                            Genre = 6,
                            ImagePath = "https://picsum.photos/640/480/?image=141",
                            IsDeleted = false,
                            Price = 97.14m,
                            PublisherId = 3,
                            Title = "Aliquid quis sunt."
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6366),
                            Genre = 8,
                            ImagePath = "https://picsum.photos/640/480/?image=754",
                            IsDeleted = false,
                            Price = 32.77m,
                            PublisherId = 3,
                            Title = "Voluptatibus quos voluptatibus."
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 8,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6397),
                            Genre = 0,
                            ImagePath = "https://picsum.photos/640/480/?image=30",
                            IsDeleted = false,
                            Price = 23.35m,
                            PublisherId = 2,
                            Title = "In est quis."
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6423),
                            Genre = 1,
                            ImagePath = "https://picsum.photos/640/480/?image=85",
                            IsDeleted = false,
                            Price = 78.64m,
                            PublisherId = 2,
                            Title = "Quia earum quia."
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 10,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6510),
                            Genre = 1,
                            ImagePath = "https://picsum.photos/640/480/?image=631",
                            IsDeleted = false,
                            Price = 55.94m,
                            PublisherId = 1,
                            Title = "Quia porro soluta."
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6537),
                            Genre = 6,
                            ImagePath = "https://picsum.photos/640/480/?image=391",
                            IsDeleted = false,
                            Price = 44.61m,
                            PublisherId = 3,
                            Title = "Eveniet sunt hic."
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 7,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6561),
                            Genre = 7,
                            ImagePath = "https://picsum.photos/640/480/?image=789",
                            IsDeleted = false,
                            Price = 94.47m,
                            PublisherId = 3,
                            Title = "Eos odio odio."
                        },
                        new
                        {
                            Id = 11,
                            AuthorId = 3,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6587),
                            Genre = 0,
                            ImagePath = "https://picsum.photos/640/480/?image=518",
                            IsDeleted = false,
                            Price = 77.11m,
                            PublisherId = 1,
                            Title = "Enim ut dignissimos."
                        },
                        new
                        {
                            Id = 12,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6614),
                            Genre = 3,
                            ImagePath = "https://picsum.photos/640/480/?image=636",
                            IsDeleted = false,
                            Price = 22.70m,
                            PublisherId = 3,
                            Title = "Adipisci hic praesentium."
                        },
                        new
                        {
                            Id = 13,
                            AuthorId = 8,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6638),
                            Genre = 6,
                            ImagePath = "https://picsum.photos/640/480/?image=369",
                            IsDeleted = false,
                            Price = 49.63m,
                            PublisherId = 4,
                            Title = "Aut qui explicabo."
                        },
                        new
                        {
                            Id = 14,
                            AuthorId = 9,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6698),
                            Genre = 8,
                            ImagePath = "https://picsum.photos/640/480/?image=316",
                            IsDeleted = false,
                            Price = 31.51m,
                            PublisherId = 1,
                            Title = "Minima et rem."
                        },
                        new
                        {
                            Id = 15,
                            AuthorId = 8,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6725),
                            Genre = 4,
                            ImagePath = "https://picsum.photos/640/480/?image=879",
                            IsDeleted = false,
                            Price = 77.79m,
                            PublisherId = 1,
                            Title = "Ea consequatur quo."
                        },
                        new
                        {
                            Id = 16,
                            AuthorId = 4,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6755),
                            Genre = 0,
                            ImagePath = "https://picsum.photos/640/480/?image=679",
                            IsDeleted = false,
                            Price = 78.90m,
                            PublisherId = 3,
                            Title = "Voluptatum incidunt qui."
                        },
                        new
                        {
                            Id = 17,
                            AuthorId = 5,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6785),
                            Genre = 1,
                            ImagePath = "https://picsum.photos/640/480/?image=1040",
                            IsDeleted = false,
                            Price = 27.82m,
                            PublisherId = 3,
                            Title = "Cum et recusandae."
                        },
                        new
                        {
                            Id = 18,
                            AuthorId = 6,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6814),
                            Genre = 6,
                            ImagePath = "https://picsum.photos/640/480/?image=1064",
                            IsDeleted = false,
                            Price = 59.64m,
                            PublisherId = 2,
                            Title = "Debitis libero corrupti."
                        },
                        new
                        {
                            Id = 19,
                            AuthorId = 2,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6845),
                            Genre = 3,
                            ImagePath = "https://picsum.photos/640/480/?image=785",
                            IsDeleted = false,
                            Price = 46.81m,
                            PublisherId = 1,
                            Title = "Autem soluta sit."
                        },
                        new
                        {
                            Id = 20,
                            AuthorId = 6,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(6869),
                            Genre = 7,
                            ImagePath = "https://picsum.photos/640/480/?image=341",
                            IsDeleted = false,
                            Price = 80.26m,
                            PublisherId = 4,
                            Title = "Deserunt temporibus aspernatur."
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DataAccessLayer.Model.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int?>("CartId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CartId");

                    b.HasIndex("OrderId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BillingAddress = "123 Main St, City, Country",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7246),
                            CustomerEmail = "user@user.com",
                            CustomerName = "Jonh Doe",
                            IsDeleted = false,
                            ShippingAddress = "123 Main St, City, Country",
                            TotalAmount = 822m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            BillingAddress = "123 Main St, City, Country",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7260),
                            CustomerEmail = "user@user.com",
                            CustomerName = "Jonh Doe",
                            IsDeleted = false,
                            ShippingAddress = "123 Main St, City, Country",
                            TotalAmount = 622m,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BillingAddress = "123 Main St, City, Country",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7260),
                            CustomerEmail = "user@user.com",
                            CustomerName = "Jonh Doe",
                            IsDeleted = false,
                            ShippingAddress = "123 Main St, City, Country",
                            TotalAmount = 692m,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BookId = 8,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7309),
                            IsDeleted = false,
                            OrderId = 1,
                            Price = 93m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            BookId = 5,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7318),
                            IsDeleted = false,
                            OrderId = 1,
                            Price = 57m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 3,
                            BookId = 15,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7319),
                            IsDeleted = false,
                            OrderId = 1,
                            Price = 81m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 4,
                            BookId = 5,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7320),
                            IsDeleted = false,
                            OrderId = 1,
                            Price = 84m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 5,
                            BookId = 16,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7321),
                            IsDeleted = false,
                            OrderId = 1,
                            Price = 63m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 6,
                            BookId = 1,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7323),
                            IsDeleted = false,
                            OrderId = 2,
                            Price = 71m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 7,
                            BookId = 18,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7324),
                            IsDeleted = false,
                            OrderId = 2,
                            Price = 56m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 8,
                            BookId = 11,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7325),
                            IsDeleted = false,
                            OrderId = 2,
                            Price = 91m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 9,
                            BookId = 4,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7325),
                            IsDeleted = false,
                            OrderId = 2,
                            Price = 58m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 10,
                            BookId = 13,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7327),
                            IsDeleted = false,
                            OrderId = 2,
                            Price = 88m,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 11,
                            BookId = 18,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7328),
                            IsDeleted = false,
                            OrderId = 3,
                            Price = 67m,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 12,
                            BookId = 13,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7329),
                            IsDeleted = false,
                            OrderId = 3,
                            Price = 56m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 13,
                            BookId = 4,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7329),
                            IsDeleted = false,
                            OrderId = 3,
                            Price = 76m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 14,
                            BookId = 4,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7330),
                            IsDeleted = false,
                            OrderId = 3,
                            Price = 66m,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 15,
                            BookId = 2,
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 168, DateTimeKind.Utc).AddTicks(7331),
                            IsDeleted = false,
                            OrderId = 3,
                            Price = 95m,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Bio = "Id culpa nemo nihil adipisci. Aliquid sed eos rerum autem aliquid hic eaque. Quidem natus tempore quia ut. Qui nobis non quisquam aperiam facilis omnis.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 166, DateTimeKind.Utc).AddTicks(5616),
                            IsDeleted = false,
                            Name = "Davis Group"
                        },
                        new
                        {
                            Id = 2,
                            Bio = "Beatae deleniti repudiandae blanditiis cum saepe iure. Labore et rem minima cum quia eum ipsa autem. Autem aliquid non ad. Laboriosam vitae labore perspiciatis quis voluptatem nam et eum.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 166, DateTimeKind.Utc).AddTicks(6487),
                            IsDeleted = false,
                            Name = "O'Connell, Runte and Beier"
                        },
                        new
                        {
                            Id = 3,
                            Bio = "Tempora qui consequuntur in. Veniam est aspernatur quibusdam. In quae itaque suscipit pariatur dolore sint.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 166, DateTimeKind.Utc).AddTicks(6824),
                            IsDeleted = false,
                            Name = "Braun, DuBuque and Lehner"
                        },
                        new
                        {
                            Id = 4,
                            Bio = "Ut et iste ut est et nesciunt. Consequatur laboriosam velit voluptas dolores itaque nam quia eos perspiciatis. Nostrum exercitationem quia accusantium ad est mollitia. Quis ipsam mollitia ea. Alias debitis perferendis iusto et est facere similique accusamus sed.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 166, DateTimeKind.Utc).AddTicks(6987),
                            IsDeleted = false,
                            Name = "Kihn - Schiller"
                        },
                        new
                        {
                            Id = 5,
                            Bio = "Sunt porro est sequi accusamus aut ut cumque eveniet. Perferendis totam in iure provident facilis qui nobis. Blanditiis quas numquam ut. Nihil voluptas consequatur porro consequuntur accusamus. Sequi aut quia autem expedita.",
                            CreatedDate = new DateTime(2024, 10, 16, 11, 22, 45, 166, DateTimeKind.Utc).AddTicks(7168),
                            IsDeleted = false,
                            Name = "Brown and Sons"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Stars")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("DataAccessLayer.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fd6fc7dc-bda2-438a-9dde-0f7f73b3b506",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEHFEGk5lSP7kyKlEldAV6jaydzK+lIKYD5E+f3ceSSywyMTFV2ijWHTD7YDwlDA+Yg==",
                            PhoneNumber = "0123456987",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "540237e7-8f09-462f-ae5f-5a928652b092",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8a31bd1-ff8b-44df-93eb-3153f6e1eb39",
                            Email = "user@user.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Name = "Jonh Doe",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEHmDCBnN6QJSXns50B6+zQialmNHiXrwW6w+pEE0567QbELZT+ivcUWh0wAvl0xNrw==",
                            PhoneNumber = "0123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b29bf609-c0a3-4961-a254-95be4aba6e22",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Model.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Model.Book", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Cart", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Model.CartItem", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Cart", null)
                        .WithMany("CartItems")
                        .HasForeignKey("CartId");

                    b.HasOne("DataAccessLayer.Model.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Order", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Model.OrderItem", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Review", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Model.WishlistItem", b =>
                {
                    b.HasOne("DataAccessLayer.Model.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Model.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Model.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DataAccessLayer.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer.Model.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("DataAccessLayer.Model.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
